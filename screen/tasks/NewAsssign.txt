import React from "react";
import {
    View,
    Text,
    StyleSheet,
    SafeAreaView,
    FlatList,
    TouchableOpacity,
    Image,
    Dimensions,
    TextInput,
    ScrollView
} from "react-native";
import RBSheet from "react-native-raw-bottom-sheet";
import Accordion from 'react-native-collapsible/Accordion';
import RadioForm, { RadioButton, RadioButtonInput, RadioButtonLabel } from 'react-native-simple-radio-button';
import { ListUsers, changeAssignedTask, todoList, subcat, subCategoryList, usersTaskListWithSubcat } from '../../utils/api';
import Header from '../../component/tasks/Header'
import Footer from '../../component/tasks/Footer'
import { showError } from "../../actions/Error";
import Spinner from "../../component/tasks/Spinner";
import SelectBox from 'react-native-multi-selectbox';
import { InputDropdown } from "../../component";
import { lowerFirst, xorBy } from 'lodash';
import colors from "../../config/colors";
import { formatdate } from "../../utils/helper";
import MultiSelectDropdown from "../../component/MultiSelectDropdown";
import Configs from "../../config/Configs";
import { Colors } from "../../config";
import moment from "moment";
import DateRangePicker from "react-native-daterange-picker";
import AppContext from "../../context/AppContext";
import DateTimePickerModal from "react-native-modal-datetime-picker";
const individual = require('../../assets/tasks/manager.png')
const rotate = require('../../assets/tasks/Rotate.png')
const compete = require('../../assets/tasks/Compete.png')
const collaborate = require('../../assets/tasks/Collborate.png')
const critical = require('../../assets/tasks/Critical.png')
const danger = require('../../assets/tasks/Danger.png')
const low = require('../../assets/tasks/Low.png')
const moderate = require('../../assets/tasks/Moderate.png')
const high = require('../../assets/tasks/High.png')
const greentick = require('../../assets/tasks/greentick.png')
import * as Animatable from 'react-native-animatable';
import Tsst_Collapsible from "./Test_collapsible";

const deviceWidth = Dimensions.get('window').width

const CatItemCard = (props) => {
    return (
        <TouchableOpacity
            onPress={() => props.navigation.push('ViewItem', { id: props.id, category_id: props.category_id })} style={styles.containerCart}
            onLongPress={() => { props.selectItem(props.item) }}
        >
            <View style={{ flexDirection: 'row', alignItems: 'center' }}>
                {/* change icon size for major icon here */}
                <Image source={props.priority} style={{ height: 45, width: 45, resizeMode: 'contain' }} />
                <View style={{ paddingLeft: 15 }}>
                    <Text style={{ paddingBottom: 2, fontSize: 16, fontWeight: 'bold', color: '#7f7f7f' }}>{props.title}</Text>
                    <Text style={{ paddingBottom: 2, fontSize: 13, opacity: 0.6 }}>{props.date}</Text>
                    <Text style={{ fontStyle: 'italic', fontSize: 12, opacity: 0.5 }}>{props.members}</Text>
                </View>
            </View>

            <View style={{ alignItems: 'center', paddingRight: 10 }}>
                {/* change icon size in image style */}
                <Image source={props.taskType} style={{ marginBottom: 5, height: 25, width: 25, resizeMode: 'contain' }} />
                <Text style={{ fontSize: 12, opacity: 0.5 }}>{props.coins}</Text>
                <Text style={{ fontSize: 11, opacity: 0.5 }}>Coins</Text>
            </View>
        </TouchableOpacity>
    )
}

const SECTIONS = [
    {
      title: 'First',
      content: 'Lorem ipsum...sdgb saidgsiau gsag vasdbcvsmc baskjcvdasklj bsakmc s apsodha;oiowrhijfbv furgfu afjka;jsxcbvaspigdvypasgviapusv ajsv asdjvcugdjksbcv kasjd vasvjsavs mn ADSKCNS;LKDCPOSADCBN ASDLKCNOCDHASPOUI  sdpfov fvbavdfap bv',
    },
    {
      title: 'Second',
      content: 'Lorem ipsumsiodhfosafhosujpisub iu sudsoiucbvaiosbvc ivb svs vsvbijjsvbkjsvb skkvbsjvbkjsvb vjsavbaskjvbaskjvb ksjvbasjkbalskjvbak alkj kjavb ksjavb aakjsvbajbv kajbv ',
    },
  ];

class NewAssignScreen extends React.Component {
    static contextType = AppContext
    constructor(props) {
        super(props);
        this.state = {
            data: [],
            status: "loading....",
            selectedUsers: [],
            users: [],
            isFetching: true,
            assignTypeName: "",
            assignTypeID: "",
            assignType: Configs.ASSIGN_TYPE,
            isAssignTypeMenuOpen: false,
            startDate: null,
            endDate: null,
            displayedDate: moment(),
            minDate: moment().set("date", String(new Date().getDate()).padStart(2, '0')),
            status: '',
            categories: [],
            sub_categories: [],
            category_name: '',
            subCategory_name: '',
            category_id: '',
            subCategory_id: '',
            tasks_name: '',
            tasks_id: '',
            tasks: [],
            isCategoryOpen: false,
            isSubCategoryOpen: false,
            isAssignOpen: false,
            isTasksOpen: false,
            assign_name: "",
            assign_id: '',
            assignFrom_name: "",
            assignFrom_id: '',
            selectedItems: [],
            isAssignFromOpen: false,
            isAssignTypeOpen: false,
            setDatePickerVisibility: false,
            end_date: '',
            chooseTask: Configs.TASK_TYPE,
            chooseTask_id: '',
            activeSections: [],
        }
    }

    componentDidMount() {
        this.getUserList();
        this.getCategoryList();
    }
    selectItem = data => {
        let priority = compete;
        if (data.values.priority === "Critical") {
            priority = critical;
        } else if (data.values.priority === "Danger") {
            priority = danger;
        } else if (data.values.priority === "Low") {
            priority = low;
        } else if (data.values.priority === "Medium") {
            priority = moderate;
        } else if (data.values.priority === "High") {
            priority = high;
        }

        data.isSelect = !data.isSelect;
        data.selectedClass = data.isSelect ? styles.selected : styles.list;
        data.priority = data.isSelect ? greentick : priority;

        const index = this.state.data.findIndex(
            item => data.id === item.id
        );

        this.state.data[index] = data;

        this.setState({
            data: this.state.data,
        });
    };
    getUserList = () => {
        ListUsers()
            .then((response) => {
                const sources = response.data;
                // console.log(sources)
                let users = sources.data.map((a, index) => {
                    return {
                        id: a.id,
                        name: a.full_name,
                    }
                })
                this.setState({
                    status: users.length === 0 ? 'No Task List Available' : '',
                    users: users,
                    isFetching: false
                })
            }).catch(error => {
                this.setState({
                    users: [],
                    isFetching: false
                })
                showError(error)
            })
    }


    // setSelectedTeams = (value) => { this.setState({ selectedUsers: value }, () => { }) }

    // onMultiChange = () => {
    //     return (item) => this.setSelectedTeams(xorBy(this.state.selectedUsers, [item], 'id'))
    // }

    assign = () => {
        const { assignTypeID, startDate, endDate, selectedUsers, data } = this.state;

        if (selectedUsers.length <= 0) {
            alert("Please select user");
            return;
        }

        if (data.length <= 0) {
            alert("Please select Task");
            return;
        }

        // if (assignTypeID == 'delicate') {
        //     if (!startDate || !endDate) {
        //         alert("Please select date");
        //         return;
        //     }
        // }
        let assign_to_date = ''
        if (assignTypeID == "delicate") {
            assign_to_date = moment(new Date()).add(3, 'days').format('YYYY-MM-DD')
        } else if (assignTypeID == "permanent") {
            assign_to_date = moment(new Date()).add(30, 'days').format('YYYY-MM-DD')
        } else {
            assign_to_date = moment(new Date()).add(3, 'days').format('YYYY-MM-DD')
        }

        let obj = {
            "users": selectedUsers,
            "tasks": data,
            "assigned_type": assignTypeID,
            "assign_from_date": moment(new Date()).add(1, 'days').format('YYYY-MM-DD'),
            "assign_to_date": assign_to_date
        }
        // console.log(obj);
        // return
        this.setState({
            isFetching: true
        }, () => {
            changeAssignedTask(obj)
                .then((response) => {
                    console.log(response);
                    this.setState({
                        isFetching: false,
                        selectedUsers: []
                    })
                    alert("Task Assign is successfull")
                }
                )
                .catch((err) => {
                    this.setState({
                        isFetching: false
                    })
                    showError(err)
                })
        })

    }
    showDatePicker = () => {
        console.log("Hello");
        this.setState({ datePickerVisibility: true });
    };

    hideDatePicker = () => {
        this.setState({ datePickerVisibility: false });
    };

    handleConfirm = (v) => {
        console.log(v);
        this.setState({
            end_date: v
        })
    }

    toggleCategoryOption = () =>
        this.setState({ isCategoryOpen: !this.state.isCategoryOpen });
    toggleSubCategoryOption = () =>
        this.setState({ isSubCategoryOpen: !this.state.isSubCategoryOpen });
    toggleTasksOption = () =>
        this.setState({ isTasksOpen: !this.state.isTasksOpen });
    toggleAssignOption = () =>
        this.setState({ isAssignOpen: !this.state.isAssignOpen });
    toggleAssignFromOption = () =>
        this.setState({ isAssignFromOpen: !this.state.isAssignFromOpen });
    toggleAssignTypeOption = () =>
        this.setState({ isAssignTypeOpen: !this.state.isAssignTypeOpen });

    getCategoryList = () => {
        const user_id = this.context.userDetails.id;
        todoList(user_id)
            .then((response) => {
                const sources = response.data;

                let categories = sources.data.map((a, index) => {
                    return {
                        id: a.id,
                        name: a.name,
                        priority: a.priority,
                        description: a.description,
                        image: a.image,
                        all_task_count: a.all_task_count,
                        completed_task_count: a.completed_task_count,
                    }
                })
                // console.log("categories>>>",categories);
                this.setState({
                    status: categories.length === 0 ? 'No Task List Available' : '',
                    categories: categories,
                })
                // this.getSubCategoryList();
            }).catch(error => {
                this.setState({
                    categories: []
                })
                showError(error)
            })
    }
    getTaskByUser_Subcat = () => {
        usersTaskListWithSubcat(this.state.assignFrom_id, this.state.subCategory_id).then((res) => {
            let items = res.data.data.filter((item) => item.task_type == "Individual")
            let data = items.map((value) => {
                let priority = compete;
                if (value.priority === "Critical") {
                    priority = critical;
                } else if (value.priority === "Danger") {
                    priority = danger;
                } else if (value.priority === "Low") {
                    priority = low;
                } else if (value.priority === "Medium") {
                    priority = moderate;
                } else if (value.priority === "High") {
                    priority = high;
                }
                let task_type = compete;
                if (value.task_type === "Individual") {
                    task_type = individual;
                } else if (value.task_type === "Rotate") {
                    task_type = rotate;
                } else if (value.task_type === "Collaborate") {
                    task_type = collaborate;
                } else if (value.task_type === "Compete") {
                    task_type = compete;
                }
                return {
                    id: value.id,
                    name: value.name,
                    category_id: value.category_id,
                    date: formatdate(value.schedule_start, 'true'),
                    members: value.assign_level_1,
                    priority: priority,
                    taskType: task_type,
                    coins: value.point,
                    status: value.status,
                    values: value,
                }
            })

            this.setState({
                data: data,
                status: data.length === 0 ? 'No Task List Found' : ""
            })
        }).catch((err) => console.log(err))
    }

    setAssignType = (v) => {
        this.setState({
            assignTypeID: v,
            isAssignTypeOpen: false
        })
    }
    setChooseTask = (v) => {
        this.setState({
            chooseTask_id: v,
            category_id: '',
            category_name: '',
            subCategory_id: '',
            subCategory_name: '',
        }, () => { this.getTaskByUser_Subcat();
            if(v=="selected"){
            this.RBSheet.open()} })
    }
    setAssignFrom = (v) => {
        this.setState({
            assignFrom_name: v.name,
            assignFrom_id: v.id,
            isAssignFromOpen: false
        }, () => {
            this.getTaskByUser_Subcat()
        })
        // console.log("Cat>>>>>", v);
    }
    setAssign = (v) => {
        console.log(v);
        this.setState({
            selectedUsers: v,
            assign_name: v.name,
            assign_id: v.id,
            isAssignOpen: false
        })
        // console.log("Cat>>>>>", v);
    }

    setCategory = (v) => {
        this.setState({
            category_id: v.id,
            category_name: v.name,
            isCategoryOpen: false
        }, () => { this.getSubCategoryList(v.id) })
        // console.log("Cat>>>>>", v);
    }

    getSubCategoryList = (id) => {
        const user_id = this.context.userDetails.id;
        subcat(id, user_id)
            .then((response) => {
                const sources = response.data;
                let sub_categories = sources.data.map((a, index) => {
                    return {
                        id: a.id,
                        name: a.name,
                        priority: a.priority,
                        description: a.description,
                        image: a.image,
                        all_task_count: a.all_task_count,
                        completed_task_count: a.completed_task_count,
                    }
                })
                this.setState({
                    status: sub_categories.length === 0 ? 'No Task List Available' : '',
                    sub_categories: sub_categories
                })
            }).catch(error => {
                this.setState({
                    sub_categories: [],
                })
                showError(error)
            })
    }

    setSubCategory = (v) => {
        this.setState({
            subCategory_id: v.id,
            subCategory_name: v.name,
            isSubCategoryOpen: false
        }, () => { this.getTasks(v.id); this.getTaskByUser_Subcat() })
        // console.log("Cat>>>>>", v);
    }


    getTasks = (id) => {
        const user_id = this.context.userDetails.id;
        subCategoryList(this.state.category_id, id, user_id)
            .then((response) => {
                const sources = response.data;
                let items = sources.data.filter((item) => item.task_type == "Individual")
                let data = items.map((value) => {
                    let priority = compete;
                    if (value.priority === "Critical") {
                        priority = critical;
                    } else if (value.priority === "Danger") {
                        priority = danger;
                    } else if (value.priority === "Low") {
                        priority = low;
                    } else if (value.priority === "Medium") {
                        priority = moderate;
                    } else if (value.priority === "High") {
                        priority = high;
                    }
                    let task_type = compete;
                    if (value.task_type === "Individual") {
                        task_type = individual;
                    } else if (value.task_type === "Rotate") {
                        task_type = rotate;
                    } else if (value.task_type === "Collaborate") {
                        task_type = collaborate;
                    } else if (value.task_type === "Compete") {
                        task_type = compete;
                    }
                    return {
                        id: value.id,
                        name: value.name,
                        category_id: value.category_id,
                        date: formatdate(value.schedule_start, 'true'),
                        members: value.assign_level_1,
                        priority: priority,
                        taskType: task_type,
                        coins: value.point,
                        status: value.status,
                        values: value,
                    }
                })
                console.log("?????????????", data);
                this.setState({
                    tasks: data,
                    status: data.length === 0 ? 'No Task List Found' : ""
                })
            })
            .catch(error => {
                showError(error);
                this.setState({
                    data: []
                })
            })
    }

    setTask = (v) => {
        console.log("Taskssss", v[0]);
        this.setState({
            selectedItems: v,
            tasks_id: v.id,
            tasks_name: v.name,
            assignFrom_name: v[0].members,
            assignFrom_id: v[0].values.assign_lvl_1_user_id,
            data: v,
            isTasksOpen: false
        })
    }


    toggleAllocatedToMenu = () =>
        this.setState({
            isAssignTypeMenuOpen: !this.state.isAssignTypeMenuOpen,
        });

    setAllocatedTo = (v) => {
        let allocatedTo = v.name;
        this.setState(
            {
                assignTypeName: allocatedTo,
                assignTypeID: v.id,
                isAssignTypeMenuOpen: false,
                showLoader: true,
            })
    };

    setDates = (dates) => {
        this.setState({
            ...dates,
        });
    };
    // _renderSectionTitle = (section) => {
    //     return (
    //       <View style={styles.content}>
    //         <Text>{section.content}</Text>
    //       </View>
    //     );
    //   };
    
      _renderHeader(section, index, isActive, sections) {
        return (
          <Animatable.View
            duration={300}
            transition="backgroundColor"
            style={{ backgroundColor: (isActive ? 'rgba(255,255,255,1)' : 'rgba(245,252,255,1)') }}>
            <Text style={styles.headerText}>{section.title}</Text>
          </Animatable.View>
        );
      }
    
      _renderContent(section, i, isActive, sections) {
        return (
          <Animatable.View
            duration={300}
            transition="backgroundColor"
            style={{ backgroundColor: (isActive ? 'red' : 'blue') }}>
            <Animatable.Text
              duration={300}
              easing="ease-out"
              animation={isActive ? 'zoomIn' : false}>
              {section.content}
            </Animatable.Text>
          </Animatable.View>
        );
      }
    
      _updateSections = (activeSections) => {
        this.setState({ activeSections });
      };

    render() {
        const { title, id } = this.props.route.params;
        const { startDate, endDate, displayedDate, assignTypeID, minDate } = this.state;

        if (this.state.isFetching) {
            return (
                <SafeAreaView style={styles.container}>
                    <Header
                        navigation={this.props.navigation}
                        leftNavTo={'CategoryItems'}
                        params={{ 'id': id, 'title': title }}
                        title={'Assign New User'}
                        leftIcon={'ios-arrow-back'}
                    />
                    <View style={styles.body}>
                        <Spinner />
                    </View>
                    {/* <Footer /> */}
                </SafeAreaView>
            )
        }
        const renderItem = ({ item }) => (
            <CatItemCard
                navigation={this.props.navigation}
                category_id={item.category_id}
                id={item.id}
                coins={item.coins}
                taskType={item.taskType}
                members={item.members}
                priority={item.priority}
                date={item.date}
                title={item.name}
                item={item}
                selectItem={this.selectItem}
                extraData={this.state.data}
            />
        );
        return (
            <SafeAreaView style={styles.container}>
                <Header
                    navigation={this.props.navigation}
                    leftNavTo={'CategoryItems'}
                    params={{ 'id': id, 'title': title }}
                    title={'Assign New User'}
                    leftIcon={'ios-arrow-back'}
                />

                <View style={styles.body}>
                    <ScrollView >
                        <View style={styles.inputContainer}>
                            <InputDropdown
                                label={"From Person"}
                                value={this.state.assignFrom_name}
                                isOpen={this.state.isAssignFromOpen}
                                items={this.state.users}
                                openAction={this.toggleAssignFromOption}
                                closeAction={this.toggleAssignFromOption}
                                setValue={this.setAssignFrom}
                                labelStyle={styles.name}
                                textFieldStyle={styles.inputText}
                            />
                        </View>
                        <View style={styles.inputContainer}>
                            <InputDropdown
                                label={"To Person"}
                                value={this.state.assign_name}
                                isOpen={this.state.isAssignOpen}
                                items={this.state.users}
                                openAction={this.toggleAssignOption}
                                closeAction={this.toggleAssignOption}
                                setValue={this.setAssign}
                                labelStyle={styles.name}
                                textFieldStyle={styles.inputText}
                            />
                        </View>

                        <View style={styles.RadioinputContainer}>
                            <Text style={styles.Radioname}>Assign Type : </Text>
                            <RadioForm
                                radio_props={this.state.assignType}
                                initial={-1}
                                onPress={this.setAssignType}
                                buttonColor={'#63c3a5'}
                                selectedButtonColor={'#63c3a5'}
                                selectedLabelColor={Colors.textColor}
                                labelColor={Colors.textColor}
                                formHorizontal={true}
                                labelHorizontal={false}
                                style={[styles.inputRadio, { marginLeft: 50 }]}
                                buttonSize={15}
                            />
                        </View>
                        {this.state.assignTypeID == 'delicate' ? (
                            <>
                                <View>
                                    <View style={styles.inputContainer}>
                                        <Text style={styles.name}>Starts On</Text>
                                        <TouchableOpacity onPress={() => { this.showDatePicker }} style={styles.inputText}>
                                            <Text style={{ fontSize: 18, backgroundColor: "#f9f6f6", marginTop: 10, color: Colors.textColor, opacity: 0.8 }}>19.07.22</Text>
                                        </TouchableOpacity>
                                    </View>
                                    <DateTimePickerModal
                                        mode="default"
                                        isVisible={this.state.isDateTimePickerVisible}
                                        onConfirm={this.handleConfirm}
                                        onCancel={this.hideDatePicker}
                                    />
                                    <View style={styles.inputContainer}>
                                        <Text style={styles.name}>Ends On</Text>
                                        <TouchableOpacity onPress={() => { this.showDatePicker }} style={styles.inputText}>
                                            <Text style={{ fontSize: 18, backgroundColor: "#f9f6f6", marginTop: 10, color: Colors.textColor, opacity: 0.8 }}>21.07.22</Text>
                                        </TouchableOpacity>
                                    </View>
                                    <DateTimePickerModal
                                        mode="default"
                                        isVisible={this.state.isDateTimePickerVisible}
                                        onConfirm={this.handleConfirm}
                                        onCancel={this.hideDatePicker}
                                    />

                                    {/* <DateRangePicker
                                    onChange={this.setDates}
                                    endDate={endDate}
                                    startDate={startDate}
                                    displayedDate={displayedDate}
                                    minDate={minDate}
                                    range
                                    containerStyle={{ position: "absolute", left: -(deviceWidth / 2) + 30, top: -deviceWidth }}
                                >
                                    <View>
                                        <View style={[styles.fieldBox, { alignItems: 'center' }]}>
                                            {startDate && endDate ? (<Text>{`${moment(startDate).format('DD/MM/YYYY')} - ${moment(endDate).format('DD/MM/YYYY')}`}</Text>) : (<Text style={styles.labelName}>Select Date</Text>)}
                                        </View>
                                    </View>
                                </DateRangePicker> */}
                                </View>
                            </>
                        ) : null}
                    <View style={styles.RadioinputContainer}>
                            <Text style={styles.Radioname}>Select Option : </Text>
                            <RadioForm
                                radio_props={this.state.chooseTask}
                                initial={-1}
                                onPress={this.setChooseTask}
                                buttonColor={'#63c3a5'}
                                selectedButtonColor={'#63c3a5'}
                                selectedLabelColor={Colors.textColor}
                                labelColor={Colors.textColor}
                                formHorizontal={true}
                                labelHorizontal={false}
                                style={styles.inputRadio}
                                buttonSize={15}
                            />
                        </View>
                       {/* {this.state.chooseTask_id == 'selected' ?
                            <View style={styles.inputContainer}>
                                <InputDropdown
                                    label={"Categories"}
                                    value={this.state.category_name}
                                    isOpen={this.state.isCategoryOpen}
                                    items={this.state.categories}
                                    openAction={this.toggleCategoryOption}
                                    closeAction={this.toggleCategoryOption}
                                    setValue={this.setCategory}
                                    labelStyle={styles.name}
                                    textFieldStyle={styles.inputText}
                                />
                            </View>
                            : null

                        } 
                        
                        {this.state.category_id == '' ? null :
                            <View style={styles.inputContainer}>
                                <InputDropdown
                                    label={"Sub Categories"}
                                    value={this.state.subCategory_name}
                                    isOpen={this.state.isSubCategoryOpen}
                                    items={this.state.sub_categories}
                                    openAction={this.toggleSubCategoryOption}
                                    closeAction={this.toggleSubCategoryOption}
                                    setValue={this.setSubCategory}
                                    labelStyle={styles.name}
                                    textFieldStyle={styles.inputText}
                                />
                            </View>
                        }*/}


                        <RBSheet
                        ref={ref => {
                            this.RBSheet = ref;
                        }}
                        height={300}
                        openDuration={250}
                        // customStyles={{
                        //     container: {
                        //         justifyContent: "center",
                        //         alignItems: "center"
                        //     }
                        // }}
                    >
                    <Tsst_Collapsible/>
                    </RBSheet>
                        <View style={globalStyles.h10} />


                        {this.state.data.length > 0 ?
                            <View>
                                <Text style={{ alignSelf: "center" }}>Selected Tasks</Text>
                                <View style={globalStyles.h10} />
                                <FlatList
                                    data={this.state.data}
                                    renderItem={renderItem}
                                    keyExtractor={item => item.id.toString()}
                                />
                            </View>

                            :
                            <Text style={{ alignSelf: "center", color: "tomato" }}>No Tasks found</Text>}

                        <View>
                            <TouchableOpacity
                                onPress={() => {
                                    this.assign();
                                }}
                                style={[styles.btn, styles.btnSuccess]}
                            >
                                <Text style={styles.btnText}>Assign</Text>
                            </TouchableOpacity>
                        </View>
                    </ScrollView>
                </View>

                {/* <Footer /> */}
            </SafeAreaView>
        );
    }
}
export default NewAssignScreen;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#fff'
    },
    body: {
        flex: 9,
        // paddingHorizontal: 5,
        // marginVertical:10
    },
    containerCart: {
        width: '100%',
        paddingVertical: 12,
        borderBottomColor: '#e5e5e5',
        borderBottomWidth: 1,
        paddingHorizontal: 10,
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center'
    },
    btn: {
        width: 150,
        height: 50,
        justifyContent: 'center',
        alignItems: 'center',
        borderRadius: 3,
        marginBottom: 5,
        alignSelf: 'center',
        marginTop: 20
    },
    btnSuccess: {
        backgroundColor: colors.primary,
    },
    btnText: { color: colors.white, fontSize: 16 },
    fieldBox: {
        height: 40,
        fontSize: 12,
        color: Colors.textColor,
        width: "100%",
        padding: 5,
    },
    labelName: {
        color: colors.textColor,
        lineHeight: 40,
        fontSize: 14,
        paddingLeft: 4,
    },
    textfield: {
        backgroundColor: "#fff",
        height: 40,
        
        fontSize: 12,
        color: colors.textColor,
        textAlign: "right",
        width: "60%",
        padding: 5,
    },
    inputContainer: {
        padding: 10,
    },
    name: {
        fontSize: 18,
        color: Colors.textColor,
        marginBottom: 5,
    },
    RadioinputContainer: {
        padding: 10,
        flexDirection: "row"
    },
    Radioname: {
        fontSize: 18,
        color: Colors.textColor,
        top: 12,
    },
    inputRadio: {
        marginLeft: 20,
        marginTop: 5,
    },
    inputText: {
        height: 50,
        borderColor: "#ccc",
        borderWidth: 1,
        borderRadius: 3,
        fontSize: 18,
        backgroundColor: "#f9f6f6",
        paddingHorizontal: 10,
        color: Colors.textColor,
    },

});


